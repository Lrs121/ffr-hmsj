#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#
#  This file is generated by build_types.py from datatype.def.
#
#  DO NOT EDIT THIS FILE DIRECTLY. Update "datatype.def" and rerun "build_types.py"
#
#  Generated on 2020-03-16 20:21

from stream.inputstream import InputStream
from stream.outputstream import OutputStream


class Item(object):
    def __init__(self, stream: InputStream = None):
        if stream is None:
            self.sort_order = 0
            self.field_effect = 0
            self.targeting = 0
            self.usage = 0
            self.graphic = 0
            self.power = 0
            self.cost = 0
            self.sale_price = 0

        else:
            self.sort_order = stream.get_u16()
            self.field_effect = stream.get_u8()
            self.targeting = stream.get_u8()
            self.usage = stream.get_u8()
            self.graphic = stream.get_u8()
            self.power = stream.get_u16()
            self.cost = stream.get_u32()
            self.sale_price = stream.get_u32()

    def write(self, stream: OutputStream):
        stream.put_u16(self.sort_order)
        stream.put_u8(self.field_effect)
        stream.put_u8(self.targeting)
        stream.put_u8(self.usage)
        stream.put_u8(self.graphic)
        stream.put_u16(self.power)
        stream.put_u32(self.cost)
        stream.put_u32(self.sale_price)


class Weapon(object):
    def __init__(self, stream: InputStream = None):
        if stream is None:
            self.sort_order = 0
            self.equip_classes = 0
            self.atk = 0
            self.acc = 0
            self.evade = 0
            self.spell = 0
            self.elements = 0
            self.family_effect = 0
            self.str_mod = 0
            self.sta_mod = 0
            self.agi_mod = 0
            self.int_mod = 0
            self.crit_rate = 0
            self.hp_boost = 0
            self.mp_boost = 0
            self.unused = 0
            self.cost = 0
            self.sale_price = 0

        else:
            self.sort_order = stream.get_u16()
            self.equip_classes = stream.get_u16()
            self.atk = stream.get_u8()
            self.acc = stream.get_u8()
            self.evade = stream.get_u8()
            self.spell = stream.get_u8()
            self.elements = stream.get_u16()
            self.family_effect = stream.get_u8()
            self.str_mod = stream.get_u8()
            self.sta_mod = stream.get_u8()
            self.agi_mod = stream.get_u8()
            self.int_mod = stream.get_u8()
            self.crit_rate = stream.get_u8()
            self.hp_boost = stream.get_u8()
            self.mp_boost = stream.get_u8()
            self.unused = stream.get_u16()
            self.cost = stream.get_u32()
            self.sale_price = stream.get_u32()

    def write(self, stream: OutputStream):
        stream.put_u16(self.sort_order)
        stream.put_u16(self.equip_classes)
        stream.put_u8(self.atk)
        stream.put_u8(self.acc)
        stream.put_u8(self.evade)
        stream.put_u8(self.spell)
        stream.put_u16(self.elements)
        stream.put_u8(self.family_effect)
        stream.put_u8(self.str_mod)
        stream.put_u8(self.sta_mod)
        stream.put_u8(self.agi_mod)
        stream.put_u8(self.int_mod)
        stream.put_u8(self.crit_rate)
        stream.put_u8(self.hp_boost)
        stream.put_u8(self.mp_boost)
        stream.put_u16(self.unused)
        stream.put_u32(self.cost)
        stream.put_u32(self.sale_price)


class Armor(object):
    def __init__(self, stream: InputStream = None):
        if stream is None:
            self.sort_order = 0
            self.equip_classes = 0
            self.defence = 0
            self.weight = 0
            self.evade = 0
            self.spell = 0
            self.elemental_resists = 0
            self.str_mod = 0
            self.sta_mod = 0
            self.agi_mod = 0
            self.int_mod = 0
            self.hp_boost = 0
            self.mp_boost = 0
            self.unused = 0
            self.cost = 0
            self.sale_price = 0

        else:
            self.sort_order = stream.get_u16()
            self.equip_classes = stream.get_u16()
            self.defence = stream.get_u8()
            self.weight = stream.get_u8()
            self.evade = stream.get_u8()
            self.spell = stream.get_u8()
            self.elemental_resists = stream.get_u16()
            self.str_mod = stream.get_u8()
            self.sta_mod = stream.get_u8()
            self.agi_mod = stream.get_u8()
            self.int_mod = stream.get_u8()
            self.hp_boost = stream.get_u8()
            self.mp_boost = stream.get_u8()
            self.unused = stream.get_u32()
            self.cost = stream.get_u32()
            self.sale_price = stream.get_u32()

    def write(self, stream: OutputStream):
        stream.put_u16(self.sort_order)
        stream.put_u16(self.equip_classes)
        stream.put_u8(self.defence)
        stream.put_u8(self.weight)
        stream.put_u8(self.evade)
        stream.put_u8(self.spell)
        stream.put_u16(self.elemental_resists)
        stream.put_u8(self.str_mod)
        stream.put_u8(self.sta_mod)
        stream.put_u8(self.agi_mod)
        stream.put_u8(self.int_mod)
        stream.put_u8(self.hp_boost)
        stream.put_u8(self.mp_boost)
        stream.put_u32(self.unused)
        stream.put_u32(self.cost)
        stream.put_u32(self.sale_price)


